# This file describes the GitHub Actions workflow for continuous integration of XS Core.
name: EMU Test

on:
  push:
    branches: [ master, nanhu ]
  pull_request:
    branches: [ master, nanhu ]

jobs:
  generate-verilog:
    runs-on: bosc
    continue-on-error: false
    name: Generate Verilog
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: set env
        run: |
          export HEAD_SHA=${{ github.run_number }}
          echo "RELEASE_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "NEMU_HOME=/nfs/home/share/ci-workloads/NEMU" >> $GITHUB_ENV
          echo "WAVE_HOME=/nfs/home/ci-runner/xs-wave/${HEAD_SHA}" >> $GITHUB_ENV
          echo "RELEASE_HOME=/nfs/home/share/nanhu_release" >> $GITHUB_ENV
          echo "XSTOP_RELEASE_HOME=/nfs/home/share/nanhu_XSTop_release" >> $GITHUB_ENV
          mkdir -p /nfs/home/ci-runner/xs-wave/${HEAD_SHA}
      - name: clean up
        run: |
          python3 $GITHUB_WORKSPACE/scripts/xiangshan.py --clean
      - name: check top wiring
        run:
          bash .github/workflows/check-usage.sh "BoringUtils" $GITHUB_WORKSPACE
      - name: generate verilog file
        run:
          python3 $GITHUB_WORKSPACE/scripts/xiangshan.py --generate --num-cores 2
      - name: check verilog
        run:
          python3 $GITHUB_WORKSPACE/.github/workflows/check_verilog.py build/XSTop.v
      - name: release
        run: |
          rsync -av --exclude=nanhu_release/.git --exclude=nanhu_release/run \
            --exclude=nanhu_release/parser.py --exclude=nanhu_release/get_flist_rtl.py \
            $RELEASE_HOME .
          python3 $GITHUB_WORKSPACE/scripts/parser.py --xs-home $GITHUB_WORKSPACE
          cp build/XSTop.graphml rtl/XSTop.graphml
          cp build/build/XSTop.v.conf rtl/XSTop.v.conf
          python3 $GITHUB_WORKSPACE/scripts/get_flist_rtl.py nanhu_release
          mv rtl nanhu_release/rtl
          tar -czf $XSTOP_RELEASE_HOME/release-${RELEASE_SHA}.tar.gz nanhu_release
          rm -rf nanhu_release
  emu-mc:
    runs-on: bosc
    continue-on-error: false
    timeout-minutes: 900
    name: EMU - MC
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: set env
        run: |
          export HEAD_SHA=${{ github.run_number }}
          echo "NEMU_HOME=/nfs/home/share/ci-workloads/NEMU" >> $GITHUB_ENV
          echo "AM_HOME=/nfs/home/share/ci-workloads/nexus-am" >> $GITHUB_ENV
          echo "PERF_HOME=/nfs/home/ci-runner/xs-perf/${HEAD_SHA}" >> $GITHUB_ENV
          echo "WAVE_HOME=/nfs/home/ci-runner/xs-wave/${HEAD_SHA}" >> $GITHUB_ENV
          mkdir -p /nfs/home/ci-runner/xs-perf/${HEAD_SHA}
          mkdir -p /nfs/home/ci-runner/xs-wave/${HEAD_SHA}
      - name: clean up
        run: |
          python3 $GITHUB_WORKSPACE/scripts/xiangshan.py --clean
      - name: Build MC EMU
        run: |
          python3 $GITHUB_WORKSPACE/scripts/xiangshan.py --build \
            --num-cores 2 \
            --dramsim3 /nfs/home/share/ci-workloads/DRAMsim3 \
            --with-dramsim3 --threads 16
      - name: MC Test
        run: |
          python3 $GITHUB_WORKSPACE/scripts/xiangshan.py --wave-dump $WAVE_HOME --threads 16 --numa --diff ./ready-to-run/riscv64-nemu-interpreter-dual-so --ci mc-tests 2> /dev/zero
      - name: SMP Linux
        run: |
          python3 $GITHUB_WORKSPACE/scripts/xiangshan.py --wave-dump $WAVE_HOME --threads 16 --numa --diff ./ready-to-run/riscv64-nemu-interpreter-dual-so --ci linux-hello-smp 2> /dev/zero

